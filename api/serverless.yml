service: serverless-seed-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function # https://github.com/functionalone/serverless-iam-roles-per-function

custom:
  prune:
    automatic: true
    number:
  cognito:
    userPoolId: ${env:AWS_APP_COGNITO_USER_POOL_ID, 'unset-cognito-user-pool-id'}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-1'}
  environment:
    REGION: ${self:provider.region}
    USER_POOL_ID: ${self:custom.cognito.userPoolId}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminListGroupsForUser
      # Resource: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.cognito.userPoolId}"
      Resource: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/*"

functions:
  hello:
    handler: functions/get.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  user:
    handler: functions/user.main
    events:
      - http:
          path: user/{userName} # single user
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: user # all users
          method: get
          cors: true
          authorizer: aws_iam
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
        Resource: "arn:aws:cognito-idp:${self:provider.region}:#{AWS::AccountId}:userpool/${self:custom.cognito.userPoolId}"

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
